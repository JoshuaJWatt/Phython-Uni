{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":251518976},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.7"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1557309906853,"exec_count":1,"id":"8c266e","input":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","kernel":"python3","pos":2,"start":1557309904382,"state":"done","type":"cell"}
{"cell_type":"code","end":1557309906997,"exec_count":2,"id":"b359e7","input":"signal = pd.read_csv('signal_training.dat', sep=\" \")\nbackgr = pd.read_csv('background_training.dat', sep=\" \")","kernel":"python3","pos":3,"start":1557309906862,"state":"done","type":"cell"}
{"cell_type":"code","end":1557309907118,"exec_count":3,"id":"220a61","input":"# All operations will be easier if we concatenate signal and background into one dataframe, and use signal_true to distinguish them.\ndf = pd.concat((signal,backgr)).drop(columns=['event_true','reaction_true']).sample(frac=1).reset_index(drop=1)\n# If we replace all -999.9 with np.NaN, pandas automatically excludes them.\ndf = df.replace(-999.9,np.NaN)","kernel":"python3","pos":4,"start":1557309907017,"state":"done","type":"cell"}
{"cell_type":"code","end":1557309907231,"exec_count":4,"id":"66af42","input":"def metric(df,var,val,lr,df_kept=None):\n    '''\n    This calculates the metric (eff*pur) of the proportion of kept states.\n    This can be done in 2 ways. We can either pass a dataframe to cut, and \n    the variable and value to cut on, or pass the kept frame directly.\n    '''\n    if type(df_kept)==type(None):\n        if lr.lower()=='r':\n            df_kept = df[df[var]>val]\n        if lr.lower()=='l':\n            df_kept = df[df[var]<val]\n    \n    total_kept   = len(df_kept) \n    signal_kept  = len(df_kept[df_kept['signal_true']==1])\n    total_signal = len(signal)\n    eff = signal_kept/total_signal\n    \n    if total_kept>0:\n        pur = signal_kept/total_kept\n    else:\n        pur = 0\n    return eff*pur\n\ndef metricCurves(df,var):\n    '''\n    This is used anywhere we need to get either the value of metric at many\n    cut points, or find an optimum cut point. So it is used in Ex. 4 and 5.\n    '''\n    nVals = 50\n    varSpace = np.linspace(df[var].min(),df[var].max(),nVals)\n    Louts = np.zeros(nVals)\n    Routs = np.zeros(nVals)\n    for i,v in enumerate(varSpace):\n        Louts[i] = metric(df,var,v,'l')\n        Routs[i] = metric(df,var,v,'r')\n    LBestIndex = np.argmax(Louts)\n    RBestIndex = np.argmax(Routs)\n    LBest = Louts[LBestIndex]\n    RBest = Routs[RBestIndex]\n    if LBest>RBest:\n        bestMetric = LBest\n        bestCut = varSpace[LBestIndex] \n        bestDir = 'L'\n        bestOuts = Louts\n    else:\n        bestMetric = RBest\n        bestCut = varSpace[RBestIndex]\n        bestDir = 'R'\n        bestOuts = Routs\n    return bestMetric, bestCut, bestDir, varSpace, bestOuts","kernel":"python3","pos":5,"start":1557309907129,"state":"done","type":"cell"}
{"cell_type":"code","end":1557309911045,"exec_count":5,"id":"7da6d6","input":"# Here we create modelTable, which is the best metrics on the training data.\n\nnames   = []\nmetrics = []\ncuts    = []\ndirs    = []\n\nvaribs = list(df)[1:]\nfor var in varibs:\n    names.append(var)\n    bestMetric, bestCut, bestDir, varSpace, bestOuts = metricCurves(df,var)\n    metrics.append(bestMetric)\n    cuts.append(bestCut)\n    dirs.append(bestDir)\n\nmodelTable = pd.DataFrame({\n    'Name':names,\n    'Metric value':metrics,\n    'Best cut':cuts,\n    'Directions':dirs\n})\nmodelTable = modelTable[['Name','Metric value','Best cut','Directions']] # Enforce a column order.","kernel":"python3","pos":6,"start":1557309907282,"state":"done","type":"cell"}
{"cell_type":"code","end":1557309911092,"exec_count":6,"id":"c58335","input":"display(modelTable.sort_values('Metric value',ascending=False).reset_index(drop=1))","kernel":"python3","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Metric value</th>\n      <th>Best cut</th>\n      <th>Directions</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>effpully</td>\n      <td>0.789176</td>\n      <td>-0.353368</td>\n      <td>R</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>efftime</td>\n      <td>0.693480</td>\n      <td>0.453600</td>\n      <td>L</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>effpullx</td>\n      <td>0.673517</td>\n      <td>0.081554</td>\n      <td>R</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>nue</td>\n      <td>0.634709</td>\n      <td>2080.459095</td>\n      <td>R</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>piontotale</td>\n      <td>0.606841</td>\n      <td>126.974144</td>\n      <td>R</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>energybalance</td>\n      <td>0.598936</td>\n      <td>-72.505588</td>\n      <td>R</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>ntracks</td>\n      <td>0.578387</td>\n      <td>0.000000</td>\n      <td>R</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>muonz</td>\n      <td>0.499925</td>\n      <td>-209.285116</td>\n      <td>R</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>muonpos</td>\n      <td>0.499925</td>\n      <td>2964.929813</td>\n      <td>L</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>pospions</td>\n      <td>0.497751</td>\n      <td>3.020408</td>\n      <td>L</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>muonpull</td>\n      <td>0.481303</td>\n      <td>3.562212</td>\n      <td>L</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>muonmom</td>\n      <td>0.481057</td>\n      <td>-186.336881</td>\n      <td>R</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>muoncos</td>\n      <td>0.480958</td>\n      <td>-0.903803</td>\n      <td>R</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>pospionz</td>\n      <td>0.394910</td>\n      <td>805.498615</td>\n      <td>L</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>pospiontheta</td>\n      <td>0.394910</td>\n      <td>-0.588694</td>\n      <td>R</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>pospionmom</td>\n      <td>0.394910</td>\n      <td>-449.031340</td>\n      <td>R</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>fgdcos</td>\n      <td>0.204630</td>\n      <td>1.477876</td>\n      <td>L</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>pi0elpull</td>\n      <td>0.166796</td>\n      <td>-0.100726</td>\n      <td>R</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>negpionmom</td>\n      <td>0.161990</td>\n      <td>3242.947232</td>\n      <td>L</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"             Name  Metric value     Best cut Directions\n0        effpully      0.789176    -0.353368          R\n1         efftime      0.693480     0.453600          L\n2        effpullx      0.673517     0.081554          R\n3             nue      0.634709  2080.459095          R\n4      piontotale      0.606841   126.974144          R\n5   energybalance      0.598936   -72.505588          R\n6         ntracks      0.578387     0.000000          R\n7           muonz      0.499925  -209.285116          R\n8         muonpos      0.499925  2964.929813          L\n9        pospions      0.497751     3.020408          L\n10       muonpull      0.481303     3.562212          L\n11        muonmom      0.481057  -186.336881          R\n12        muoncos      0.480958    -0.903803          R\n13       pospionz      0.394910   805.498615          L\n14   pospiontheta      0.394910    -0.588694          R\n15     pospionmom      0.394910  -449.031340          R\n16         fgdcos      0.204630     1.477876          L\n17      pi0elpull      0.166796    -0.100726          R\n18     negpionmom      0.161990  3242.947232          L"}}},"pos":7,"start":1557309911054,"state":"done","type":"cell"}
{"cell_type":"code","end":1557309911248,"exec_count":7,"id":"affa9b","input":"# Perform the same cleaning operations on the test data as on training.\n\nsignal_test = pd.read_csv('signal_data.dat', sep=\" \")\nbackgr_test = pd.read_csv('background_data.dat', sep=\" \")\ndf_test = pd.concat(\n    (signal_test,backgr_test)\n).drop(columns=['event_true','reaction_true']).sample(frac=1).reset_index(drop=1)\ndf_test = df_test.replace(-999.9,np.NaN)","kernel":"python3","pos":10,"start":1557309911102,"state":"done","type":"cell"}
{"cell_type":"code","end":1557309911266,"exec_count":8,"id":"1d1fef","input":"def splitData(df,var,modelTable=None,cut=None,direc=None):\n    '''\n    Used for splitting test data on an existing model (represented by modelTable).\n    '''\n    if type(cut)==type(None):\n        cut   = modelTable.loc[modelTable['Name']==var, 'Best cut'].values[0]\n    if type(direc)==type(None):\n        direc = modelTable.loc[modelTable['Name']==var, 'Directions'].values[0]\n    if direc=='L':\n        return df[df[var]<cut]\n    if direc=='R':\n        return df[df[var]>cut]","kernel":"python3","pos":11,"start":1557309911262,"state":"done","type":"cell"}
{"cell_type":"code","end":1557309911370,"exec_count":9,"id":"fb2e75","input":"test_mets = []\nfor var in varibs:\n    df_kept = splitData(df_test,var,modelTable)\n    test_mets.append(\n        metric(df_test,var=None,val=None,lr=None,df_kept=df_kept)\n    )\nmodelTable['Test metrics'] = test_mets","kernel":"python3","pos":12,"start":1557309911283,"state":"done","type":"cell"}
{"cell_type":"code","end":1557309911393,"exec_count":10,"id":"643421","input":"display(modelTable.sort_values('Metric value',ascending=False).reset_index(drop=1))","kernel":"python3","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Metric value</th>\n      <th>Best cut</th>\n      <th>Directions</th>\n      <th>Test metrics</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>effpully</td>\n      <td>0.789176</td>\n      <td>-0.353368</td>\n      <td>R</td>\n      <td>0.754928</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>efftime</td>\n      <td>0.693480</td>\n      <td>0.453600</td>\n      <td>L</td>\n      <td>0.676325</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>effpullx</td>\n      <td>0.673517</td>\n      <td>0.081554</td>\n      <td>R</td>\n      <td>0.643333</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>nue</td>\n      <td>0.634709</td>\n      <td>2080.459095</td>\n      <td>R</td>\n      <td>0.631654</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>piontotale</td>\n      <td>0.606841</td>\n      <td>126.974144</td>\n      <td>R</td>\n      <td>0.547169</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>energybalance</td>\n      <td>0.598936</td>\n      <td>-72.505588</td>\n      <td>R</td>\n      <td>0.583536</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>ntracks</td>\n      <td>0.578387</td>\n      <td>0.000000</td>\n      <td>R</td>\n      <td>0.544538</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>muonz</td>\n      <td>0.499925</td>\n      <td>-209.285116</td>\n      <td>R</td>\n      <td>0.485051</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>muonpos</td>\n      <td>0.499925</td>\n      <td>2964.929813</td>\n      <td>L</td>\n      <td>0.485051</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>pospions</td>\n      <td>0.497751</td>\n      <td>3.020408</td>\n      <td>L</td>\n      <td>0.485051</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>muonpull</td>\n      <td>0.481303</td>\n      <td>3.562212</td>\n      <td>L</td>\n      <td>0.467987</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>muonmom</td>\n      <td>0.481057</td>\n      <td>-186.336881</td>\n      <td>R</td>\n      <td>0.469840</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>muoncos</td>\n      <td>0.480958</td>\n      <td>-0.903803</td>\n      <td>R</td>\n      <td>0.469816</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>pospionz</td>\n      <td>0.394910</td>\n      <td>805.498615</td>\n      <td>L</td>\n      <td>0.350402</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>pospiontheta</td>\n      <td>0.394910</td>\n      <td>-0.588694</td>\n      <td>R</td>\n      <td>0.350114</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>pospionmom</td>\n      <td>0.394910</td>\n      <td>-449.031340</td>\n      <td>R</td>\n      <td>0.350402</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>fgdcos</td>\n      <td>0.204630</td>\n      <td>1.477876</td>\n      <td>L</td>\n      <td>0.199311</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>pi0elpull</td>\n      <td>0.166796</td>\n      <td>-0.100726</td>\n      <td>R</td>\n      <td>0.148016</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>negpionmom</td>\n      <td>0.161990</td>\n      <td>3242.947232</td>\n      <td>L</td>\n      <td>0.196000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"             Name  Metric value     Best cut Directions  Test metrics\n0        effpully      0.789176    -0.353368          R      0.754928\n1         efftime      0.693480     0.453600          L      0.676325\n2        effpullx      0.673517     0.081554          R      0.643333\n3             nue      0.634709  2080.459095          R      0.631654\n4      piontotale      0.606841   126.974144          R      0.547169\n5   energybalance      0.598936   -72.505588          R      0.583536\n6         ntracks      0.578387     0.000000          R      0.544538\n7           muonz      0.499925  -209.285116          R      0.485051\n8         muonpos      0.499925  2964.929813          L      0.485051\n9        pospions      0.497751     3.020408          L      0.485051\n10       muonpull      0.481303     3.562212          L      0.467987\n11        muonmom      0.481057  -186.336881          R      0.469840\n12        muoncos      0.480958    -0.903803          R      0.469816\n13       pospionz      0.394910   805.498615          L      0.350402\n14   pospiontheta      0.394910    -0.588694          R      0.350114\n15     pospionmom      0.394910  -449.031340          R      0.350402\n16         fgdcos      0.204630     1.477876          L      0.199311\n17      pi0elpull      0.166796    -0.100726          R      0.148016\n18     negpionmom      0.161990  3242.947232          L      0.196000"}}},"pos":13,"start":1557309911383,"state":"done","type":"cell"}
{"cell_type":"code","end":1557309911409,"exec_count":11,"id":"9219ea","input":"def applyNCombined(df,n,modelTable):\n    '''\n    This takes the top n variables, and iteratively cuts them. It produces\n    df_kept by splitting the previous df_kept, and then evaluates the metric\n    at each number of variables.\n    '''\n    outs = []\n    topVars = modelTable.sort_values('Metric value',ascending=False)['Name'].values\n    df_kept = df.copy()\n    for var in topVars[:n+1]:\n        df_kept = splitData(df_kept,var,modelTable)\n        outs.append(metric(df_test,var,val=None,lr=None,df_kept=df_kept))\n    return outs","kernel":"python3","pos":15,"start":1557309911406,"state":"done","type":"cell"}
{"cell_type":"code","end":1557309911487,"exec_count":12,"id":"703430","input":"combinedMets = applyNCombined(df_test,6,modelTable)\nfor i,c in enumerate(combinedMets):\n    print('Combined {} best variables   ---   Metric = {:2.3f}'.format(i+1,c))","kernel":"python3","output":{"0":{"name":"stdout","text":"Combined 1 best variables   ---   Metric = 0.755\nCombined 2 best variables   ---   Metric = 0.735\nCombined 3 best variables   ---   Metric = 0.668\nCombined 4 best variables   ---   Metric = 0.599\nCombined 5 best variables   ---   Metric = 0.414\nCombined 6 best variables   ---   Metric = 0.369\nCombined 7 best variables   ---   Metric = 0.315\n"}},"pos":16,"start":1557309911414,"state":"done","type":"cell"}
{"cell_type":"code","end":1557309929338,"exec_count":13,"id":"dca858","input":"topVars = list(modelTable.sort_values('Metric value',ascending=False)['Name'].values)\nsns.pairplot(data=df.sample(frac=1)[:int(len(df)*0.1)], # Take a sample of points for fast and clear plotting.\n             x_vars=topVars[:6],\n             y_vars=topVars[:6],\n             hue='signal_true',\n             plot_kws={'alpha': 0.1})","kernel":"python3","output":{"0":{"name":"stderr","text":"/usr/local/lib/python3.6/dist-packages/statsmodels/nonparametric/kde.py:448: RuntimeWarning: invalid value encountered in greater\n  X = X[np.logical_and(X > clip[0], X < clip[1])] # won't work for two columns.\n/usr/local/lib/python3.6/dist-packages/statsmodels/nonparametric/kde.py:448: RuntimeWarning: invalid value encountered in less\n  X = X[np.logical_and(X > clip[0], X < clip[1])] # won't work for two columns.\n"},"1":{"data":{"text/plain":"<seaborn.axisgrid.PairGrid at 0x7efeed97aa20>"},"exec_count":13},"2":{"data":{"image/png":"2cb3604aa48cc033d0b69411bc529854e179da6a","text/plain":"<matplotlib.figure.Figure at 0x7efeed97aa90>"},"metadata":{"image/png":{"height":1069,"width":1154}}}},"pos":19,"start":1557309911495,"state":"done","type":"cell"}
{"cell_type":"code","end":1557309929768,"exec_count":14,"id":"86b933","input":"from sklearn.metrics import accuracy_score as accs\ndfbonus = df.copy()\ndfbonus['effpulld'] = np.sign( (dfbonus['effpully']+1) / (dfbonus['effpullx']+1) )/2 + 0.5\nprint('Accuracy = {:.2f}'.format(accs(dfbonus['effpulld'],dfbonus['signal_true'])))\nprint('Metric   = {:.2f}'.format(\n    np.dot(dfbonus['effpulld'],dfbonus['signal_true'])**2/ (dfbonus['effpulld'].sum() * dfbonus['signal_true'].sum()) )) ","kernel":"python3","output":{"0":{"name":"stdout","text":"Accuracy = 0.92\nMetric   = 0.86\n"}},"pos":22,"start":1557309929388,"state":"done","type":"cell"}
{"cell_type":"code","end":1557309929796,"exec_count":15,"id":"6203b6","input":"def metric2D(df,var1,var2,modelTable):\n    '''\n    We loop through all cut values for effpullx and effpully, and perform a contourf plot.\n    '''\n    nVals = 50\n    varSpace1 = np.linspace(df[var1].min(),df[var1].max(),nVals)\n    varSpace2 = np.linspace(df[var2].min(),df[var2].max(),nVals)\n    dir1 = modelTable.loc[modelTable['Name']==var1, 'Directions'].values[0]\n    dir2 = modelTable.loc[modelTable['Name']==var2, 'Directions'].values[0]\n    \n    outs = np.zeros((nVals,nVals))\n    for i,val1 in enumerate(varSpace1):\n        for j,val2 in enumerate(varSpace2):\n            df_kept = splitData(\n                splitData(\n                    df,\n                    var1,modelTable=None,cut=val1,direc=dir1\n                ),\n                var2,modelTable=None,cut=val2,direc=dir2\n            )\n            outs[i,j] = metric(df_test,var=None,val=None,lr=None,df_kept=df_kept)\n    return varSpace1,varSpace2, outs","kernel":"python3","pos":24,"start":1557309929791,"state":"done","type":"cell"}
{"cell_type":"code","end":1557309938513,"exec_count":16,"id":"4a56c3","input":"met2 = metric2D(df,'effpullx','effpully',modelTable)\nplt.contourf(*met2,50)\nplt.xlabel('effpullx')\nplt.ylabel('effpully')","kernel":"python3","output":{"0":{"data":{"text/plain":"Text(0,0.5,'effpully')"},"exec_count":16},"1":{"data":{"image/png":"57a26231cb7339efa3a05692a0ac5dbe1d081b54","text/plain":"<matplotlib.figure.Figure at 0x7efed20d9898>"},"metadata":{"image/png":{"height":263,"width":386}}}},"pos":25,"start":1557309929811,"state":"done","type":"cell"}
{"cell_type":"code","end":1557309938537,"exec_count":17,"id":"d10a41","input":"def decTree(df,depth):\n    '''\n    A decision tree is crucially different from exercise 2. In a decision tree, we have to \n    re-optimise the cut variable and cut position after each cut. If this is not done, the\n    code is effectively the same as Ex 2.\n    '''\n    print('Level = ',end='')\n    mets    = []\n    varOuts = []\n    df_kept = df.copy()\n    for level in range(depth):\n        print('{}... '.format(level+1),end='')\n        bestMetric = 0\n        bestCut = 0\n        bestVar = ''\n        bestDir = ''\n        for var in varibs:\n            metric, cut, direc, varSpace, bestOuts = metricCurves(df_kept,var)\n            if metric>bestMetric:\n                bestMetric = metric ; bestCut = cut ; bestVar = var ; bestDir = direc\n        mets.append(bestMetric)\n        varOuts.append(bestVar)\n        df_kept = splitData(df_kept,bestVar,modelTable=None,cut=bestCut,direc=bestDir)\n    return mets,varOuts","kernel":"python3","pos":27,"start":1557309938534,"state":"done","type":"cell"}
{"cell_type":"code","end":1557309938881,"exec_count":18,"id":"6a049e","input":"mets,varOuts = decTree(df_temp,5)\nprint('\\nVariables cut on... = ', varOuts)","kernel":"python3","output":{"0":{"ename":"NameError","evalue":"name 'df_temp' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-fe3a8f2203f7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmets\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mvarOuts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdecTree\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf_temp\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'\\nVariables cut on... = '\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvarOuts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'df_temp' is not defined"]}},"pos":28,"start":1557309938543,"state":"done","type":"cell"}
{"cell_type":"code","end":1557309961400,"exec_count":19,"id":"0dae80","input":"plt.plot(np.arange(1,len(mets)+1),mets)\nplt.xlabel('Tree depth')\nplt.ylabel('Metric')","kernel":"python3","output":{"0":{"ename":"NameError","evalue":"name 'mets' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-0aaa7d5445dc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmets\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mmets\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Tree depth'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Metric'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'mets' is not defined"]}},"pos":29,"start":1557309961316,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"25d6fb","input":"### 2. Combined splits","pos":14,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"3392e3","input":"### 1. Test data","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"4a92ef","input":"# Lab 8","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"65e3f0","input":"## Lab 9","pos":8,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7ac243","input":"# Model solutions for Lab 9 (including relevant parts of Lab 8)","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"85d054","input":"### 3+. New variable ","pos":20,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9168f7","input":"### 5. Decision tree","pos":26,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ba5a90","input":"### 4. 2D plot\n","pos":23,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"cf4b73","input":"### 3. Plots","pos":18,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"eb4d69","input":"We see effpullx is positively correlated with effpully for signals, and negatively for backgrounds.\nTherefore, since effpullx =  m * (effpully+1) - 1, we should construct a new variable,\n\neffpulld = np.sign((effpullx+1)/(effpully+1))/2 + 1/2\n\nThen cutting on this new variable *alone* would get an accuracy of 92% and a metric of 0.86. See below...","pos":21,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"fd7847","input":"Combining variables without re-optimising results in a worse metric.","pos":17,"state":"done","type":"cell"}
{"id":"3f5c8f","input":"","pos":30,"type":"cell"}
{"id":0,"time":1557309930407,"type":"user"}
{"last_load":1557309893690,"type":"file"}