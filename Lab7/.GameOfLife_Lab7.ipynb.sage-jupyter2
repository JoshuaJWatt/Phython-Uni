{"backend_state":"running","kernel":"anaconda5","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":77664256},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.6"}},"trust":true,"type":"settings"}
{"cell_type":"markdown","id":"0be70c","input":"## 2: ``DieHard`` animation :  [2 marks]\n\nWikipedia claims that \"Diehard is a pattern that eventually disappears, rather than stabilizing, after 130 generations\"\n\n- Using the file Die-Hard (\"data/Die-Hard\") and the Conway's rules (B3/S23)create a graph of N cells vs Generation \n- Create an animation of 60 frames , leading to and including the point where life disappears \n\nThis pattern disappears also for the HighLife (B36/S23) rules.\n\n- Find the generation where this happens for the HighLife Rules.\n- Create a similar animation of ~60 frames leading to and including the point where life disappears\n\n\nHint : Animations of the full evolution for both sets of rules.\n\n<video width=\"400\" controls>\n  <source src=\"Die-Hard.mp4\" type=\"video/mp4\">\n</video>\n<video width=\"400\" controls>\n  <source src=\"Die-Hard_High.mp4\" type=\"video/mp4\">\n</video>","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"333a8e","input":"## 3:   Pi-Hentomino [2 marks]\n\nThe Pi-Hentomino is a shape that stabilizes after a number of generations for Conway's rules (B3/S23)\n\nUsing the file Pi-Hentomino (\"data/Pi-Hentomino.txt\") and the B3/S23 rules :\n  \n  - Find the generation where the pattern stabilises\n  - Plot an animatiom of ~40 frames leading to and ~10 frames after the stabilisation of the pattern.\n\n\nHint : The full evolution is shown below.\n\n<video width=\"500\" controls>\n  <source src=\"Pi-Heptomino.mp4\" type=\"video/mp4\">\n</video>","pos":3,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"436154","input":"## 1: Profiling [2 marks]\n\nUsing the \"data/Glider.txt file and the Conway's rules B3/S23. \nFirst make sure it works i.e gives a result like the one below (no point on profiling not functioning code ..)\n\n<video width=\"400\" controls>\n  <source src=\"Glider.mp4\" type=\"video/mp4\">\n</video>\n\nCreate a function profiling your system evolution code (look at the pseudocode below for how\nto apply what we discussed in the lecture).\n\nThen: \n- Identify the most time consuming parts of your code\n\n- If you have performed optimisations already explain them\n\n- If not, are they any you can think of , or any further ones ? Tip : If you change your code, keep the older version (rename it)\nand point to the improvements you applied explicitly.\n\n- Where appilcable what would you try to further improve.\n\nExample pseudocode :\n\n```\n#Test \ndef test(world):\n    for j in range (4000):#One can use less or more than 4000\n        #Evolve the Glider model, NO animation\n        ... = evolveFunction(....)\n        \nglider=world=np.loadtxt('data/Glider.txt',dtype=np.int8)\n\n#total time\n%timeit test(glider)\n\n#shows function call\n%prun -l test(glider)\n\n#one can also use the line profiler\n%load_ext line_profiler\n%lprun -f  evolveFunction  test(glider)\n```\n\n\n","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"78b12f","input":"This most time consuming function is my 'surrounds' function. Presumably this is because I use 2 loops, and use 'Try'.\nMaking this more efficient would require a complete rewriting of this code to check edges, as taking advantage of the error output is a bit lazy. Or maybe that would be less efficient...","pos":1.9375,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ada525","input":"# 4: Universe topologies with the Glider Gun animation :  [3 marks]\n\nUsing the file GliderGun (\"data/GliderGun.txt\") and Conway's rules  (B3/S23)\n- Evolve the system for ~250 steps. \n\nStarting from the state of the system after the ~250  steps:\n- Produce an animation of ~70 frames with toroidal boundary condition\n- Produce an animation of ~70 frames assuming the cells crossing the boundary eventually go to infinity\n\nOn the 2nd case (when cells are not tracked after a distance from the boundary), try to avoid inacurracies/artifacts at the boundary.\n\nThe end result should look similar to the following (but with less frames).\n\n<video width=\"500\" controls>\n  <source src=\"GliderGun_Wrapped.mp4\" type=\"video/mp4\">\n</video>\n\n<video width=\"500\" controls>\n  <source src=\"GliderGun.mp4\" type=\"video/mp4\">\n</video>\n\n\n\n","pos":4,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"beacc6","input":"# Project 6 (part b):\n\n## Lecture/(Part a)  Reminder\n\n### The Game of Life\nThe Game of Life is a cellular automaton devised by the British mathematician John Horton Conway in 1970.<img align=\"right\" src=\"Grid.png\" HEIGHT=\"400\" WIDTH=\"266\"> \n\nThe \"game\" is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input. One interacts with the Game of Life by creating an initial configuration and observing how it evolves.\n\nThe universe of the Game of Life is an infinite two-dimensional array of square cells, each of which is in one of two possible states:\n\n- alive: cell has value = 1\n- dead: cell has value = 0\n\nEvery cell interacts with its eight neighbours, which are the cells that are horizontally, vertically, or diagonally adjacent. See Figure 1.\n\n### Rules of the game:\n\nAt each step in time (also called \"tick\"), the following transitions occur to all cells simultaneously:\n\n1. Any live cell with fewer than two live neighbours dies, as if caused by underpopulation.\n\n2. Any live cell with two or three live neighbours lives on to the next generation.\n\n3. Any live cell with more than three live neighbours dies, as if by overpopulation.\n\n4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\n\n### Alternative rules\n\nConway's Life is classified as following the $\\textbf{B}$3/$\\textbf{S}$23 rule.\n\nSpecifically a cell:\n- is $\\textbf{B}$orn if it has exactly 3 neighbours\n- $\\textbf{S}$urvives if it has 2 or 3 living neighbours \n- it dies otherwise.\n\nAnother member in the family of \"Life\" cellular automata is ``HighLife`` that follow the $\\textbf{B}$36/$\\textbf{S}$23 rule.\n\nA cell:\n- is $\\textbf{B}$orn if it has 3 or 6 neighbours\n- $\\textbf{S}$urvives if it has 2 or 3 living neighbours \n- it dies otherwise.\n\n### Universe Topology\n\nIn principle, the universe of the Game of Life is infinite.  But computers have finite memory. To simplify things one can either ingore cells that have moved far away from the visible grid (stop tracking them after a distance from the boundaries), or can use a toroidal boundary conditions  (meaning that cells that reach an edge on one side re-enter the universe on the opposite side).","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e0196b","input":"## PHY428: \"Methuselah\" R-Pantomino  :  [2 marks]\n\nThe R-pentomino does not die. It is the simplest example of a methuselah, a pattern in Conway's game of life (B3/S23) that is small but takes a long time to stabilize.\n\nUsing the  \"data/R-Pantomino.txt\" and a geometry where the cells crossing the boundary are assumed\nto go to infinity (2nd one from the previous exercise.)\n\n- Verify that the population stabilises at ~1103 Generation (you can ignore the six gliders going out of screen as they do not add to the live population)\n\n- After you verify the above, produce an animation of ~80 frames around the stabilization (e.g. ~80 frames  starting from generation 1050)\n\nHint: you can use the number of cells routine from the previous Lab and produce a plot of Number of live cells vs time measured in generations.<br>\n\n\nFor comparison the evolution for ~1150 generations is shown below:\n\n<video align=\"centre\" width=\"500\" controls>\n  <source src=\"R-Pantomino.mp4\" type=\"video/mp4\">\n</video>","pos":5,"state":"done","type":"cell"}
{"end":1554035933786,"exec_count":1,"id":"6ffcc2","input":"# Weekly functions (until I build a module to import) & imports\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\nfrom IPython.display import HTML\nplt.rcParams['figure.figsize'] = 6, 4\nplt.rcParams[\"animation.html\"] = \"html5\"\n\ndef GeneralListPlot(XList, YList, xlabel='X', ylabel='Y'):\n    \"\"\"A general function to plot 2 lists of floats, and label their axes\"\"\"\n    plt.plot(XList, YList)\n    plt.xlabel(xlabel)\n    plt.ylabel(ylabel)\n    plt.show()\n    return()","kernel":"anaconda5","pos":0.5,"start":1554035932601,"state":"done","type":"cell"}
{"end":1554035933808,"exec_count":2,"id":"cec26b","input":"class Game:\n    \n    def __init__ (self, file, S = [2,3], B = [3]): # Where S & B are survival and birth criteria\n        self.B = B\n        self.S = S\n        self.world = np.loadtxt(file, dtype=np.int8)\n        self.frame = 0 #Frame number/number of frames since start\n        #Save the initial world, helps find the period\n        self.initworld = self.world.copy()\n        \n    def __next__(self):\n        \"\"\"Generates the next frame of the game\"\"\"\n        x_dim, y_dim = self.world.shape\n        arr_next = np.zeros([x_dim, y_dim], dtype=np.int8)\n        for i in range (x_dim):\n            for j in range (y_dim):\n                SurrCh = self.surrounds(i,j)\n                if SurrCh in self.S and self.world[i,j] == 1:\n                    arr_next[i,j] = self.world[i,j]\n                elif SurrCh in self.B and self.world[i,j] == 0:\n                    arr_next[i,j] = 1\n                else:\n                    arr_next[i,j] = 0 # <= to_unsigned(0,0);\n        self.world = arr_next.reshape((x_dim, y_dim))\n        self.frame += 1\n        \n    def living(self):\n        \"\"\"Returns the number of currently living cells in the world\"\"\"\n        N = sum(self.world.flatten())\n        return(N)\n    \n    def surrounds(self, x, y):\n        \"\"\"Checks the surroundings of a cell and returns the number of lives cells around it\"\"\"\n        arr = []\n        for i in range (-1, 2):\n            for j in range (-1, 2):\n                try:\n                    arr.append(self.world[x+i,y+j])\n                except IndexError:\n                    arr.append(0)\n        sum_ = sum(arr) - self.world[x,y]\n        return(sum_)\n        \n    def livlocs(self):\n        \"\"\"Returns the locations of all the living cells in the world\"\"\"\n        x, y = np.where(self.world == 1)\n        return(x, y)\n    \n    def BCentre(self, DEBUG = 0):\n        \"\"\"Finds the Barycentre of the living cells of the board\"\"\"\n        x, y = self.livlocs()\n        xcent = sum(x)/self.living()\n        ycent = sum(y)/self.living()\n        if DEBUG == 1:\n            print(xcent, ycent)\n        return(xcent, ycent)\n    \n    def r_max(self, DEBUG = 0):\n        \"\"\"Returns the r_max of the current world\"\"\"\n        centi,centj = self.BCentre()\n        xs, ys = self.livlocs()\n        r_max_ = 0\n        for i in range (len(xs)):\n            r_ij = np.sqrt(((xs[i] - centi)**2) + ((ys[i] - centj)**2))\n            if DEBUG == 1:\n                print('r_ij: ',r_ij)\n            if r_ij > r_max_:\n                r_max_ = r_ij\n        return(r_max_)\n        \n    def reset(self):\n        \"\"\"Resets the world to it's initial state\"\"\"\n        self.world = self.initworld\n        self.frame = 0\n\n\n","kernel":"anaconda5","pos":0.75,"start":1554035933804,"state":"done","type":"cell"}
{"end":1554035933831,"exec_count":3,"id":"181b0a","input":"def part1run(world,nframes = 100, reset = 1):\n    \"\"\"Returns lists of r_max, number of living cells, and frame count of the world as the game progresses\"\"\"\n    if reset == 1:\n        world.reset()\n    rlist = []\n    livlist = []\n    framelist = []\n    rlist.append(world.r_max())\n    livlist.append(world.living())\n    framelist.append(world.frame)\n    for i in range(nframes):\n        next(world)\n        rlist.append(world.r_max())\n        livlist.append(world.living())\n        framelist.append(world.frame)\n    return(rlist, livlist, framelist)","kernel":"anaconda5","pos":0.875,"start":1554035933816,"state":"done","type":"cell"}
{"end":1554035933900,"exec_count":4,"id":"b665f5","input":"# Modified versions of the example code to produes an animation\n\ndef generate(game): # Using 'game' because world.world just looks wrong and could cause issues\n    next(game)\n    newworld = game.world\n    return(newworld)\n\ndef animatefunction(world, inputframes = 100, inputinterval = 100, reset = 1, startframe = 0):\n    if reset == 1:\n        world.reset()\n    for j in range(startframe):\n        next(world)\n    fig = plt.figure()\n    img = plt.imshow(generate(world), animated = True)\n    \n    def animate(frame):         # Why do we put this in here and not outside?\n        img.set_data(generate(world))\n        return (img,)\n       \n    plt.close()\n    anim=animation.FuncAnimation(fig, func=animate, frames=inputframes, interval=inputinterval,blit=True)\n    display(anim)\n    pass","kernel":"anaconda5","pos":0.9375,"start":1554035933839,"state":"done","type":"cell"}
{"end":1554036052307,"exec_count":5,"id":"3997bc","input":"glider = Game('data/Glider.txt')\n\ndef Ev(world, N):\n    \"\"\"Evolve the world for N frames\"\"\"\n    for i in range (N):\n        next(world)\n\n#total time\n%timeit Ev(glider, 4000)\n","kernel":"anaconda5","output":{"0":{"name":"stdout","text":"14.1 s ± 1.12 s per loop (mean ± std. dev. of 7 runs, 1 loop each)\n"}},"pos":1.5,"start":1554035933906,"state":"done","type":"cell"}
{"end":1554036068466,"exec_count":6,"id":"54cc6c","input":"#shows function call\n%prun -l 1.0 Ev(glider, 4000)","kernel":"anaconda5","output":{"0":{"name":"stdout","text":" "},"1":{"data":{"text/plain":"         14800004 function calls in 16.133 seconds\n\n   Ordered by: internal time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n  1344000    7.534    0.000   14.220    0.000 <ipython-input-2-96cc30b6babf>:32(surrounds)\n  1344000    5.632    0.000    5.632    0.000 {built-in method builtins.sum}\n     4000    1.887    0.000   16.124    0.004 <ipython-input-2-96cc30b6babf>:11(__next__)\n 12096000    1.054    0.000    1.054    0.000 {method 'append' of 'list' objects}\n     4000    0.009    0.000    0.009    0.000 {method 'reshape' of 'numpy.ndarray' objects}\n     4000    0.009    0.000    0.009    0.000 {built-in method numpy.core.multiarray.zeros}\n     4000    0.006    0.000   16.131    0.004 {built-in method builtins.next}\n        1    0.002    0.002   16.133   16.133 <ipython-input-5-e73185e78500>:3(Ev)\n        1    0.000    0.000   16.133   16.133 {built-in method builtins.exec}\n        1    0.000    0.000   16.133   16.133 <string>:1(<module>)\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}"},"start":0}},"pos":1.75,"start":1554036052335,"state":"done","type":"cell"}
{"end":1554036093845,"exec_count":7,"id":"b98d63","input":"#one can also use the line profiler\n%load_ext line_profiler\n%lprun -f  next(glider)  Ev(glider, 4000) # Gives an error that is meaningless to me. Presumably I'd get more output without this error","kernel":"anaconda5","output":{"0":{"name":"stderr","text":"/ext/anaconda5/lib/python3.6/site-packages/line_profiler.py:321: UserWarning: Could not extract a code object for the object None\n  profile = LineProfiler(*funcs)\n"},"1":{"data":{"text/plain":"Timer unit: 1e-06 s"},"start":0}},"pos":1.875,"start":1554036068487,"state":"done","type":"cell"}
{"end":1554036111046,"exec_count":8,"id":"966789","input":"diehard = Game(\"data/Die-Hard.txt\")\n\ndh_rlist, dh_livlist, dhframelist = part1run(diehard, 140)\n\nprint(\"Die Hard (Conway's rules)\")\nGeneralListPlot(dhframelist, dh_livlist, 'Frame',  'N Living Cells')\n# We can see from the plot that life disappears at 130\n\n# I could make a new function (or edit my current one) that allows you to start an animation from a given frame (DONE). And one to find the point of stabalisation/death. If I have some spare time before work I'll do that\nanimatefunction(diehard, 60, reset = 1, startframe = 100)","kernel":"anaconda5","output":{"0":{"name":"stderr","text":"/ext/anaconda5/lib/python3.6/site-packages/ipykernel/__main__.py:52: RuntimeWarning: invalid value encountered in long_scalars\n/ext/anaconda5/lib/python3.6/site-packages/ipykernel/__main__.py:53: RuntimeWarning: invalid value encountered in long_scalars\n"},"1":{"name":"stdout","text":"Die Hard (Conway's rules)\n"},"2":{"data":{"image/png":"0fb75573556176895d1c3a661508466f3b7f88a4"},"metadata":{"image/png":{"height":263,"width":384},"needs_background":"light"}},"3":{"data":{"text/html":"<video width=\"432\" height=\"288\" controls autoplay loop>\n  <source type=\"video/mp4\" src=\"data:video/mp4;base64,AAAAHGZ0eXBNNFYgAAACAGlzb21pc28yYXZjMQAAAAhmcmVlAAAf521kYXQAAAKgBgX//5zcRem9\n5tlIt5Ys2CDZI+7veDI2NCAtIGNvcmUgMTUyIC0gSC4yNjQvTVBFRy00IEFWQyBjb2RlYyAtIENv\ncHlsZWZ0IDIwMDMtMjAxNyAtIGh0dHA6Ly93d3cudmlkZW9sYW4ub3JnL3gyNjQuaHRtbCAtIG9w\ndGlvbnM6IGNhYmFjPTEgcmVmPTMgZGVibG9jaz0xOjA6MCBhbmFseXNlPTB4MzoweDExMyBtZT1o\nZXggc3VibWU9NyBwc3k9MSBwc3lfcmQ9MS4wMDowLjAwIG1peGVkX3JlZj0xIG1lX3JhbmdlPTE2\nIGNocm9tYV9tZT0xIHRyZWxsaXM9MSA4eDhkY3Q9MSBjcW09MCBkZWFkem9uZT0yMSwxMSBmYXN0\nX3Bza2lwPTEgY2hyb21hX3FwX29mZnNldD0tMiB0aHJlYWRzPTYgbG9va2FoZWFkX3RocmVhZHM9\nMSBzbGljZWRfdGhyZWFkcz0wIG5yPTAgZGVjaW1hdGU9MSBpbnRlcmxhY2VkPTAgYmx1cmF5X2Nv\nbXBhdD0wIGNvbnN0cmFpbmVkX2ludHJhPTAgYmZyYW1lcz0zIGJfcHlyYW1pZD0yIGJfYWRhcHQ9\nMSBiX2JpYXM9MCBkaXJlY3Q9MSB3ZWlnaHRiPTEgb3Blbl9nb3A9MCB3ZWlnaHRwPTIga2V5aW50\nPTI1MCBrZXlpbnRfbWluPTEwIHNjZW5lY3V0PTQwIGludHJhX3JlZnJlc2g9MCByY19sb29rYWhl\nYWQ9NDAgcmM9Y3JmIG1idHJlZT0xIGNyZj0yMy4wIHFjb21wPTAuNjAgcXBtaW49MCBxcG1heD02\nOSBxcHN0ZXA9NCBpcF9yYXRpbz0xLjQwIGFxPTE6MS4wMACAAAAIjGWIhAAR//73iB8yy2n5Otdy\nEeetLq0fUO5GcV6kvf4gAAADABacmUP7YcdOWsNAAEKS8ERCh/sVzAJcnUJGApBIHFHR/vTGFXts\ndgxuLvKE+884Md/LPdnjlYkIDA/XDNkDbJTMuElAikMInrh+J6KMFf2s//PgIiTVsSuhr72njgQC\n/9UUt0xFiIolCtyn5Q3x9CZPY7n4/ougc5TpPWAsVZKYV4zfSNYsEe6kab6xLkATN3/GVZqS/rWc\n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\n\">\n  Your browser does not support the video tag.\n</video>"}}},"pos":2.5,"start":1554036093892,"state":"done","type":"cell"}
{"end":1554036127693,"exec_count":9,"id":"73bacf","input":"diehardHL = Game('data/Die-Hard.txt', S = [2,3], B = [3,6])\n\ndh_rlist, dh_livlist, dhframelist = part1run(diehardHL, 140)\n\nprint(\"Die Hard (HighLife Rules)\")\nGeneralListPlot(dhframelist, dh_livlist, 'Frame',  'N Living Cells')\n## We can see from the plot that life disappears at frame ~118]\n\nanimatefunction(diehardHL, 60, reset = 1, startframe = 98)","kernel":"anaconda5","output":{"0":{"name":"stderr","text":"/ext/anaconda5/lib/python3.6/site-packages/ipykernel/__main__.py:52: RuntimeWarning: invalid value encountered in long_scalars\n/ext/anaconda5/lib/python3.6/site-packages/ipykernel/__main__.py:53: RuntimeWarning: invalid value encountered in long_scalars\n"},"1":{"name":"stdout","text":"Die Hard (HighLife Rules)\n"},"2":{"data":{"image/png":"ca7f7d947f8de1cc4ec118f066183a4fc6a47baf"},"metadata":{"image/png":{"height":263,"width":384},"needs_background":"light"}},"3":{"data":{"text/html":"<video width=\"432\" height=\"288\" controls autoplay loop>\n  <source type=\"video/mp4\" src=\"data:video/mp4;base64,AAAAHGZ0eXBNNFYgAAACAGlzb21pc28yYXZjMQAAAAhmcmVlAAAtdW1kYXQAAAKgBgX//5zcRem9\n5tlIt5Ys2CDZI+7veDI2NCAtIGNvcmUgMTUyIC0gSC4yNjQvTVBFRy00IEFWQyBjb2RlYyAtIENv\ncHlsZWZ0IDIwMDMtMjAxNyAtIGh0dHA6Ly93d3cudmlkZW9sYW4ub3JnL3gyNjQuaHRtbCAtIG9w\ndGlvbnM6IGNhYmFjPTEgcmVmPTMgZGVibG9jaz0xOjA6MCBhbmFseXNlPTB4MzoweDExMyBtZT1o\nZXggc3VibWU9NyBwc3k9MSBwc3lfcmQ9MS4wMDowLjAwIG1peGVkX3JlZj0xIG1lX3JhbmdlPTE2\nIGNocm9tYV9tZT0xIHRyZWxsaXM9MSA4eDhkY3Q9MSBjcW09MCBkZWFkem9uZT0yMSwxMSBmYXN0\nX3Bza2lwPTEgY2hyb21hX3FwX29mZnNldD0tMiB0aHJlYWRzPTYgbG9va2FoZWFkX3RocmVhZHM9\nMSBzbGljZWRfdGhyZWFkcz0wIG5yPTAgZGVjaW1hdGU9MSBpbnRlcmxhY2VkPTAgYmx1cmF5X2Nv\nbXBhdD0wIGNvbnN0cmFpbmVkX2ludHJhPTAgYmZyYW1lcz0zIGJfcHlyYW1pZD0yIGJfYWRhcHQ9\nMSBiX2JpYXM9MCBkaXJlY3Q9MSB3ZWlnaHRiPTEgb3Blbl9nb3A9MCB3ZWlnaHRwPTIga2V5aW50\nPTI1MCBrZXlpbnRfbWluPTEwIHNjZW5lY3V0PTQwIGludHJhX3JlZnJlc2g9MCByY19sb29rYWhl\nYWQ9NDAgcmM9Y3JmIG1idHJlZT0xIGNyZj0yMy4wIHFjb21wPTAuNjAgcXBtaW49MCBxcG1heD02\nOSBxcHN0ZXA9NCBpcF9yYXRpbz0xLjQwIGFxPTE6MS4wMACAAAALEWWIhAAR//73iB8yy2n5Otdy\nEeetLq0fUO5GcV6kvf4gAAADABacmUP7YcdOWsNAAEKS8ERCh/sVzAJcnUJGApBIHFHR/vTGFXts\ndgxuLvKE+884Md/LPdnjlYkIDA/XDNkDbJTMuElAikMInrh+J6KMFf2s//PgIiTVsSuhr72njgQC\n/9UUt0xFiIolCtyn5Q3x9CZPY7n4/ougc5TpPWAsVZKYV4zfSNYsEe6kab6xLkATN3/GVZqS/rWc\n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\nAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAGwAAABIAAAAAAAJGVkdHMAAAAcZWxzdAAAAAAAAAAB\nAAAXcAAACAAAAQAAAAAEmG1kaWEAAAAgbWRoZAAAAAAAAAAAAAAAAAAAKAAAAPAAVcQAAAAAAC1o\nZGxyAAAAAAAAAAB2aWRlAAAAAAAAAAAAAAAAVmlkZW9IYW5kbGVyAAAABENtaW5mAAAAFHZtaGQA\nAAABAAAAAAAAAAAAAAAkZGluZgAAABxkcmVmAAAAAAAAAAEAAAAMdXJsIAAAAAEAAAQDc3RibAAA\nALNzdHNkAAAAAAAAAAEAAACjYXZjMQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAGwASAASAAAAEgA\nAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABj//wAAADFhdmNDAWQAFf/h\nABhnZAAVrNlBsJaEAAADAAQAAAMAUDxYtlgBAAZo6+PLIsAAAAAcdXVpZGtoQPJfJE/FujmlG88D\nI/MAAAAAAAAAGHN0dHMAAAAAAAAAAQAAADwAAAQAAAAAFHN0c3MAAAAAAAAAAQAAAAEAAAHoY3R0\ncwAAAAAAAAA7AAAAAQAACAAAAAABAAAUAAAAAAEAAAgAAAAAAQAAAAAAAAABAAAEAAAAAAEAABQA\nAAAAAQAACAAAAAABAAAAAAAAAAEAAAQAAAAAAQAAFAAAAAABAAAIAAAAAAEAAAAAAAAAAQAABAAA\nAAABAAAUAAAAAAEAAAgAAAAAAQAAAAAAAAABAAAEAAAAAAEAABQAAAAAAQAACAAAAAABAAAAAAAA\nAAEAAAQAAAAAAQAAFAAAAAABAAAIAAAAAAEAAAAAAAAAAQAABAAAAAABAAAUAAAAAAEAAAgAAAAA\nAQAAAAAAAAABAAAEAAAAAAEAABQAAAAAAQAACAAAAAABAAAAAAAAAAEAAAQAAAAAAQAAFAAAAAAB\nAAAIAAAAAAEAAAAAAAAAAQAABAAAAAABAAAUAAAAAAEAAAgAAAAAAQAAAAAAAAABAAAEAAAAAAEA\nABQAAAAAAQAACAAAAAABAAAAAAAAAAEAAAQAAAAAAQAAFAAAAAABAAAIAAAAAAEAAAAAAAAAAQAA\nBAAAAAABAAAUAAAAAAEAAAgAAAAAAQAAAAAAAAABAAAEAAAAAAEAABQAAAAAAQAACAAAAAABAAAA\nAAAAAAEAAAQAAAAAAQAAEAAAAAACAAAEAAAAABxzdHNjAAAAAAAAAAEAAAABAAAAPAAAAAEAAAEE\nc3RzegAAAAAAAAAAAAAAPAAADbkAAAPKAAACeQAAAkYAAAIEAAABnQAAAfkAAAHSAAABnAAAAYoA\nAAE9AAABegAAAWYAAADTAAABhwAAAbQAAAEBAAAAKQAAACIAAAAfAAAAEAAAABgAAAAVAAAAEAAA\nABAAAAAYAAAAFQAAABAAAAAQAAAAGAAAABUAAAAQAAAAEAAAABgAAAAVAAAAEAAAABAAAAAYAAAA\nFQAAABAAAAAQAAAAGAAAABUAAAAQAAAAEAAAABgAAAAVAAAAEAAAABAAAAAZAAAAFQAAABAAAAAQ\nAAAAGQAAABUAAAAQAAAAEAAAABgAAAAUAAAAEAAAABRzdGNvAAAAAAAAAAEAAAAsAAAAYnVkdGEA\nAABabWV0YQAAAAAAAAAhaGRscgAAAAAAAAAAbWRpcmFwcGwAAAAAAAAAAAAAAAAtaWxzdAAAACWp\ndG9vAAAAHWRhdGEAAAABAAAAAExhdmY1Ny44My4xMDA=\n\">\n  Your browser does not support the video tag.\n</video>"}}},"pos":2.75,"start":1554036111057,"state":"done","type":"cell"}
{"end":1554036157531,"exec_count":10,"id":"215e58","input":"pihent = Game(\"data/Pi-Heptomino.txt\") #The file location in the question is wrong\n\nph_rlist, ph_livlist, phframelist = part1run(pihent, 200)\n\nprint(\"Pi-Hentomino (Conway's rules)\")\nGeneralListPlot(phframelist, ph_livlist, 'Frame',  'N Living Cells')\n\n# From the plot we can see the world population stabalises at ~170 frames\n\n# pihent.reset()\n# Ev(pihent, 130)\nanimatefunction(pihent, 50, reset = 1, startframe = 130) # Is there a reason this video doesn't work on my pc?\n\n# pihent.reset()\n# Ev(pihent, 130)\n# animatefunction(pihent, 50, reset = 0) # This also doesn't work anymore...","kernel":"anaconda5","output":{"0":{"name":"stdout","text":"Pi-Hentomino (Conway's rules)\n"},"1":{"data":{"image/png":"9f66d13b81fe0aff1c283375555da0c9c027513b"},"metadata":{"image/png":{"height":263,"width":390},"needs_background":"light"}},"2":{"more_output":true}},"pos":3.25,"scrolled":true,"start":1554036127710,"state":"done","type":"cell"}
{"end":1554036193611,"exec_count":11,"id":"908bc0","input":"glidergun = Game(\"data/GliderGun.txt\")\n\nprint(\"Non-Toroidal (kinda, I'll fix it. Probably. Maybe.)\")\n# Ev(glidergun, 250)\nanimatefunction(glidergun, 70, reset = 1, startframe = 250)\n\nprint(\"Toroidal\")\nEv(glidergun, 250)\n# Insert toroidal function here","kernel":"anaconda5","output":{"0":{"name":"stdout","text":"Non-Toroidal (kinda, I'll fix it. Probably. Maybe.)\n"},"1":{"more_output":true}},"pos":4.5,"scrolled":true,"start":1554036157558,"state":"done","type":"cell"}
{"end":1554036506408,"exec_count":12,"id":"86425e","input":"## Probably don't run this when marking, it runs for ages (as one might expect for a 1050 start frame)\n\nrpanto = Game('data/R-Pantomino.txt')\n\nrp_rlist, rp_livlist, rpframelist = part1run(rpanto, 1200)\n\nprint(\"R-pentomino (HighLife Rules)\")\nGeneralListPlot(rpframelist, rp_livlist, 'Frame',  'N Living Cells')\nprint('We can see that population stabilises somewhere around frame 1100')\n\nanimatefunction(rpanto, 80, reset = 1, startframe = 1050)","kernel":"anaconda5","output":{"0":{"name":"stdout","text":"R-pentomino (HighLife Rules)\n"},"1":{"data":{"image/png":"efca0949a3e43654022a9a98f29765b63b5a20c6"},"metadata":{"image/png":{"height":263,"width":390},"needs_background":"light"}},"2":{"name":"stdout","text":"We can see that population stabilises somewhere around frame 1100\n"},"3":{"more_output":true}},"pos":6,"scrolled":true,"start":1554036193633,"state":"done","type":"cell"}
{"id":"2cb301","input":"","pos":7,"state":"done","type":"cell"}
{"id":0,"time":1556538785789,"type":"user"}
{"last_load":1552924031501,"type":"file"}