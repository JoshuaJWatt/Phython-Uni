{"backend_state":"running","kernel":"anaconda5","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":77279232},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.6"}},"trust":true,"type":"settings"}
{"cell_type":"markdown","id":"3288e9","input":"## 1: Study  of ``still`` ``lifes`` and ``oscillators``:  [3 marks]\n\nFor the following shapes from the data folder:\n- Loaf (\"data/Loaf.txt\")\n- Pulsar (\"data/Pulsar.txt\")\n- Pentadecathlon (\"data/Pentadecathlon.txt\")\n\nFind the number of live cells and the $r_{max}$  as a function of time (number of steps).<br>\n\nCan you determine the period of the above 3 shapes from these plots?<br>\nHint: One of the shapes does not change at all, the other 2 return back to their original configuration after certain steps.\n\n$r_{max}$ is defined as:<br>\n- Given N live cells at positions  ($i$,$j$) \n- Calculate the population \"barycenter\" ($center_{i}$,$center_{j}$), where $center_{i} =\\frac{\\sum_{i}^{N} i }{N}$ and $center_{j} =\\frac{\\sum_{j}^{N} j }{N}$\n- Define the distance : $r_{i,j}= \\sqrt{(i-center_i)^2+(j-center_j)^2}$ \n- $r_{max}$ is the maximum of all the $r_{i,j}$ i.e the distance of the furthest cell from the \"barycenter\" of the population.","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"6771ff","input":"## 2: Simple animations :  [3 marks]\n\nFor the following shapes from the data folder:\n- Blinker (\"data/Blinker.txt\")\n- Pulsar (\"data/Pulsar.txt\")\n- Pentadecathlon (\"data/Pentadecathlon.txt\")\n\nProduce animations for each one. \n\nHint : Use the results of the previous exercise in order to determine the minimum number of frames where applicable (typically you will not need more the 20 frames or so).","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"6f69c4","input":"# Project 6 (part a):\n\n## The Game of Life\nThe Game of Life is a cellular automaton devised by the British mathematician John Horton Conway in 1970.<img align=\"right\" src=\"Grid.png\" HEIGHT=\"400\" WIDTH=\"266\"> \n\nThe \"game\" is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input. One interacts with the Game of Life by creating an initial configuration and observing how it evolves.\n\nThe universe of the Game of Life is an infinite two-dimensional array of square cells, each of which is in one of two possible states:\n\n- alive: cell has value = 1\n- dead: cell has value = 0\n\nEvery cell interacts with its eight neighbours, which are the cells that are horizontally, vertically, or diagonally adjacent. See Figure 1.\n\n## Rules of the game:\n\nAt each step in time (also called \"tick\"), the following transitions occur to all cells simultaneously:\n\n1. Any live cell with fewer than two live neighbours dies, as if caused by underpopulation.\n\n2. Any live cell with two or three live neighbours lives on to the next generation.\n\n3. Any live cell with more than three live neighbours dies, as if by overpopulation.\n\n4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7f57ff","input":"## 3: Replicator :  [4 marks]\n\nConway's Life is classified as following the $\\textbf{B}$3/$\\textbf{S}$23 rule.\n\nSpecifically a cell:\n- is $\\textbf{B}$orn if it has exactly 3 neighbours\n- $\\textbf{S}$urvives if it has 2 or 3 living neighbours \n- it dies otherwise.\n\nAnother member in the family of \"Life\" cellular automata is ``HighLife`` that follow the $\\textbf{B}$36/$\\textbf{S}$23 rule.\n\nA cell:\n- is $\\textbf{B}$orn if it has 3 or 6 neighbours\n- $\\textbf{S}$urvives if it has 2 or 3 living neighbours \n- it dies otherwise.\n\n\nFollowing the HighLife rules and  employing the Replicator pattern present in the data folder (\"data/Replicator.txt\").\n\n1. Evolve it for 36 generations.\n2. Produce an animation of the above 36 frames showing the system evolution\n3. Plot the Number of cells versus time\n4. Plot the  $r_{max}$ as a function of time\n5. Can you see why it is called a \"Replicator\"?","pos":3,"state":"done","type":"cell"}
{"id":0,"time":1552494476727,"type":"user"}
{"last_load":1552312254057,"type":"file"}