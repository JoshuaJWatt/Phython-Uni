{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":102809600},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.1"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1550502994881,"exec_count":46,"id":"43345f","input":"#Given function for xml imports_list\nimport glob\nimport xml.etree.ElementTree as ET\n\n# Function parseXML\n# Input: xml_file\n# Output array of elements with coordinates lat, lon, ele, time. \ndef parseXML(xml_file):\n    tree = ET.ElementTree(file=xml_file)\n    root = tree.getroot()\n    \n    xml=[]\n    for child in root[1]:\n        if child.tag == \"{http://www.topografix.com/GPX/1/1}trkseg\":\n            for step_child in child:\n                evt={} # declare a new dictionary\n                evt['lat'] = step_child.get('lat')\n                evt['lon'] = step_child.get('lon')\n                evt['ele'] = step_child[0].text\n                evt['time'] = step_child[1].text\n                \n                xml.append(evt)\n    return xml\n\n# Path may need adjusting, depending on folder configuration\nxml_file = glob.glob('../data/activity_779202142.gpx')\nxml = parseXML(xml_file[0])\n\n# Print out the size of the array\nprint(\"I read \",len(xml),\" elements\")\n\n","kernel":"python3","output":{"0":{"name":"stdout","text":"I read  3260  elements\n"}},"pos":1,"scrolled":true,"start":1550502994759,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ce3021","input":"","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":70,"id":"bb24de","input":"import numpy as np\nimport matplotlib.pyplot as plt\n\n\"\"\" Examples given\n# Example of a printout of a specific record\nprint(\"coordinates of point 55\")\nprint(xml[55])\n\n# Example on how to get the Delta t between two points:\nimport dateutil.parser as dtp\nfrom dateutil.relativedelta import *\n\nt0=(dtp.parse(xml[0]['time']) )\nt55=(dtp.parse(xml[55]['time']) )\nprint(t0)\nprint(t55)\nprint(\"Delta time is:\",(t55-t0).total_seconds() )\n\n\nThis doesn't appear to work, so I'll just do it as a function/loop\n\n# Example of how to calculate a vector with the difference between adjacent elemets\n# deltaA=A[1:]-A[:-1] # Note the length of the vector will be n-1\n\n#Example of how to add elements of a vector and keep a cumulative sum\n# Asum=A.cumsum()\n\"\"\"\n\ndef Pos(xml_input):\n    \"\"\"Turns a dictionary of latitudes, longitudes, elevations, and times into a set of lists\"\"\"\n    Lats = []\n    Lons = []\n    Eles = []\n    Times = []\n    for i in range (0, len(xml_input)):\n        Lats.append(xml_input[i]['lat'])\n        Lons.append(xml_input[i]['lon'])\n        Eles.append(xml_input[i]['ele'])\n        Times.append(xml_input[i]['time'])\n    return(Lats, Lons, Eles, Times)\n\n\ndef Diff(input_list):\n    \"\"\"Gives the difference between each point in a list and the next point\"\"\"\n    difflist = []\n    for i in range (0, len(input_list) - 1):\n        difflist.append(float(input_list[i + 1]) - float(input_list[i]))\n    return(difflist)\n\ndef DistTrav(dLat_list, dLon_list):\n    \"\"\"Finds the distances traveled, in meters, along a list of changes in latitude and longitude\"\"\"\n    dLatRad = dLat_list * ((2 * np.pi) / 360)\n    dLonRad = dLon_list * ((2 * np.pi) / 360)\n    dPhilist = []\n    Distlist = []\n    for i in range (0, len(dLatRad)): #Lat or Lon length should be the same, so can use either\n        dPhilist.apppend( sqrt( dLatRad[i] ** 2 + dLonRad[i] ** 2) )\n        Distlist.append( dPhilist[i] * 6371000) #Earth radius (m) (shouldn't need to be a var as I would hope this doesn't change)\n    return(Distlist)\n\ndef CartPos(Lat, Lon, LatOrig, LonOrig):\n    \"\"\"Finds the Cartesian coordinates of a point given it's latitude and longitude, realtive to an origin point\"\"\"\n    rE = 6371 #Earth radius in km\n    D2R = ((2 * np.pi) / (360))\n    XPos = ((float(Lat) - float(LatOrig)) * D2R) * rE\n    YPos = ((float(Lon) - float(LonOrig)) * D2R) * rE\n    return(XPos, YPos)\n\ndef CartPlot(latlist, lonlist):\n    \"\"\"Plots the route travelled, in Cartesian coordinates\"\"\"\n    Xs = []\n    Ys = []\n    for i in range (0, len(latlist)):\n        Y, X = CartPos(latlist[i], lonlist[i], latlist[0], lonlist[0])\n        Xs.append(X)\n        Ys.append(Y)\n    plt.plot(Xs, Ys)\n    plt.xlabel('X Position (km)')\n    plt.ylabel('Y Position (km)')\n    plt.show()\n    return()\n\n\"\"\" Ignoring all time stuff from now\n\ndef DiffT(input_times_list):\n    dffTlist = []\n    for i in range (0, len(input_times_list) - 1):\n        dffTlist.append(relativedelta(input_times_list[i], input_times_list[i + 1]))\n    return(dffTlist)\n\n\"\"\"\n\nlats, lons, eles, ts = Pos(xml)\n\nCartPlot(lats, lons)\n# dLats, dLons, dEles = Diff(lats), Diff(lons), Diff(eles)\n\n","kernel":"python3","output":{"0":{"name":"stdout","text":"coordinates of point 55\n{'lat': '53.05431014858186244964599609375', 'lon': '-1.74467478878796100616455078125', 'ele': '208.600006103515625', 'time': '2015-05-16T10:14:33.000Z'}\n2015-05-16 10:09:30+00:00\n2015-05-16 10:14:33+00:00\nDelta time is: 303.0\n"},"1":{"data":{"image/png":"d8705607548117bffcb8a14faf26ed8abc2385d4"},"metadata":{"image/png":{"height":263,"width":384}}},"2":{"data":{"text/plain":"()"},"exec_count":70}},"pos":2,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"59cd1e","input":"## Exercise 4. Read and analyse an XML file from a GPS\nThe file *activity_779202142.gpx* in the \"data\" directory is downloaded from a GPS watch used to record a run (a marathon in this case). The file is in XML format. XML stands for \"eXtendible Markup Language\" and is a standard format used to pass information from different programs and on the internet. You can read more about XML for instance on the Wikipedia: https://en.wikipedia.org/wiki/XML\n\nPython has methods to navigate through an XML file and capture the information contained in it. The skeleton program below contains all the basics needed to open the file and access the information about the \"track\" corresponding to the run. \n\nYou should use *longitude* and *latitute* to convert the information into a 2D positions in metres, with (0,0) being the starting point. The *time* information, given in UTC, can be converted into seconds, with t=0s being the time of the first point. The elevation is given in metres. \n\nYou should look at the xml file (open it with an editor) to see how it is structured and understand how the piece of code provided below reads it and unpacks the information into an array of dictionaries. \n\nThe dictionaries can then put into numpy arrays to be used for your data analysis. This is not the most efficient way of doing this, as one could put the information straight into arrays. Doing this way, however, it is much easier to extract informatio of a specific entry (as shown below). \n\nThis operation of reading a file in a specific format, clean up the records, and eventually prepare everything in a format that can be easily analysed is often referred to as \"data wrangling\".\n\nOnce you have x, y, h and t (position, elevation, time) plot:\n- The route taken by the runner in the (x,y) plane in km\n- The distance run as a function of time (in minutes), with t=0 being the start of the run\n- The speed of the runner (in m/s) as a function of time (in min)\n- The speed of the runner (in m/s) as a function of the distance ran (in km)\n- The elevation (in m) as a function of the distance run (in km)\n- What was the time taken to run the \"white peak\" marathon?\n\n** Total [10 marks] ** ","pos":0,"type":"cell"}
{"id":0,"time":1550498597862,"type":"user"}
{"last_load":1550498596682,"type":"file"}